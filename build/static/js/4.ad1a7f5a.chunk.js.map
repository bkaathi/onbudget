{"version":3,"sources":["controllers/Home/DashboardActions.js","state/selectors/CategorySelectors.js","state/selectors/TransactionSelectors.js","components/Card/Card.jsx","components/MonthDisplay/MonthDisplay.jsx","components/MonthDisplay/MonthDisplayActions.js","components/Modal/Modal.jsx","components/Forms/Category/Fields.jsx","utils/currency.js","components/CategoryList/Category.jsx","components/CategoryList/utils/filters.js","components/CategoryList/CategoryFilter.jsx","components/CategoryList/CategorySkeleton.jsx","utils/colors.js","components/CategoryList/AddCategoryForm/AddCategoryForm.jsx","components/CategoryList/AddCategoryForm/AddCategoryFormActions.jsx","components/CategoryList/utils/splitIntoCategories.js","components/CategoryList/CategoryList.jsx","components/CategoryList/CategoryListActions.js","components/OverviewChart/utils/formatTransactionsForChart.js","components/OverviewChart/OverviewChart.jsx","components/AddTransaction/forms/AddTransaction.jsx","definitions/Category.js","components/AddTransaction/forms/ImportStatement.jsx","components/AddTransaction/AddTransaction.jsx","components/AddTransaction/AddTransactionActions.js","utils/transactions.js","components/OverallSpending/OverallSpending.jsx","components/TransactionOverview/TransactionOverview.jsx","components/StackedCategoryChart/StackedCategoryChart.jsx","controllers/Home/Dashboard.jsx","components/Page/Page.jsx","components/SignIn/Forms/SignIn.jsx","components/SignIn/Forms/RequestAccess.jsx","components/SignIn/Forms/ForgotPassword.jsx","components/SignIn/SignIn.jsx","components/SignIn/SignInActions.js","state/selectors/FirebaseSelectors.js","state/selectors/UserSelectors.js","controllers/Home/Home.jsx"],"names":["fetchTransactions","dispatch","getState","a","getFirebase","api","path","then","transactions","type","TRANSACTIONS","payload","finally","setLoadingComplete","componentName","LOADING_COMPLETE","getCategoriesFromState","state","app","categories","getBillCategories","createSelector","filter","isBill","getDepositCategories","isDeposit","getUnplannedCategories","getActiveDateFromState","ui","date","getTransactionsFromState","filterTransactions","thisMonth","activeDate","length","categoryIds","map","id","categoryId","categoryIsIncluded","includes","isSameMonth","isAfter","Date","startOfMonth","addMonths","getBillTransactions","getDepositTransactions","getUnplannedTransactions","getMonthTransactions","all","bills","deposits","unplanned","formatTransactionsForStackedBarGraph","unplannedIds","range","Array","fill","_","index","transactionsByCategoryByMonth","reduce","byCategory","transaction","category","find","name","label","backgroundColor","color","data","monthIndex","findIndex","amount","datasets","Object","values","labels","month","format","Card","title","children","className","small","wrapped","optionalContent","centered","flexContent","gridContent","transparent","spaceBetween","cn","CardSmall","CardTransparent","grid","flex","mapDispatchToProps","setMonth","DATE","fetchTransactionsByMonth","body","transactionsByMonth","connect","classNames","useState","fetchedMonth","setFetchedMonth","isDisabled","isThisMonth","onClick","previousMonth","some","yearAndOneMonth","concat","getTime","nextMonth","disabled","Modal","isOpen","isSubmitting","isScrollable","handleCloseModal","handlePrimaryClick","handleSecondaryClick","handleCloseModalComplete","props","onCloseModal","setTimeout","hasForm","open","modalHeading","secondaryButtonText","onRequestClose","aria-label","hasScrollingContent","onRequestSubmit","onSecondarySubmit","primaryButtonText","InlineLoading","defaultProps","preventCloseOnClickOutside","initialState","isModalOpen","isFormDirty","areFieldsMounted","CategoryFormFields","formValues","setFormValues","handleSetFormValues","key","e","target","value","TextInput","labelText","autoComplete","onChange","Checkbox","checked","getInitialState","importedState","toCurrency","isNaN","Intl","NumberFormat","style","currency","Category","quantity","total","handleOnClick","borderLeftColor","filters","ALL","BILLS","DEPOSITS","UNPLANNED","CategoryFilter","setFilter","Select","light","inline","dir","size","FILTERS","keys","SelectItem","text","CategorySkeleton","SkeletonText","colors","notify","enqueueNotification","addCategory","CATEGORIES","setIsModalOpen","setIsSubmitting","setAreFieldsMounted","newColor","categoryColors","hex","finalValues","resp","errors","subtitle","Fields","defaultBreakdown","splitIntoCategories","transactionsForThisMonth","getCategory","push","entries","sort","b","editCategory","isLoading","dashboard","categoryList","combinedCategories","setCombinedCategories","setIsFormDirty","useEffect","handleEditCategory","Component","formatTransactionsForChart","overview","isArray","options","cutoutPercentage","circumference","Math","PI","rotation","legend","display","PropTypes","shape","string","bool","isRequired","setState","nextState","Number","handleInputChange","fieldName","handleDateChange","args","NumberInput","allowEmpty","invalidText","placeholder","unsortedCategories","clone","sortedCategories","DatePicker","datePickerType","DatePickerInput","required","ImportStatementForm","handleFileUpload","files","file","toString","Promise","resolve","reject","reader","FileReader","readAsText","onload","result","onerror","error","parse","skipEmptyLines","parsedData","slice","description","paidOn","depositedOn","FileUploader","labelTitle","accept","filenameStatus","onDelete","buttonLabel","iconDescription","labelDescription","MODAL_TYPES","INITIAL_FORM_VALUES","csv","getTransactions","addTransaction","importStatement","STATEMENT","categoriesExist","setIsOpen","modalType","setModalType","isAddModal","setIsAddModal","_isAddModal","Form","AddTransactionForm","modalTitle","handleOpenModal","handleClearForm","sumTransactions","sum","overallSpending","transactionOverview","billsTotal","depositsTotal","unplannedTotal","revenue","negative","positive","chartData","categoryBreakdown","scales","xAxes","stacked","yAxes","getCategories","isFetching","Page","SignInForm","toggleForm","formTypes","hasRequestedAccess","localStorage","getItem","email","password","request","forgot","RequestAccess","submittedSuccessfully","firstName","lastName","ForgotPassword","initialFormState","signIn","login","firebase","SIGN_IN","message","Error","requestAccess","REQUEST_ACCESS","console","warn","setItem","forgotPassword","FORGOT_PASSWORD","resetPassword","catch","setError","formType","setFormType","setSubmittedSuccessfully","RequestAccessForm","ForgotPasswordForm","submitButton","shouldSubmitOnEnter","err","toggle","hasFirebaseLoaded","auth","isLoaded","isFirebaseLoaded","hasFirebaseInitialized","isInitializing","isFirebaseInitializing","isAuthenticated","hasInitialized","uid","isSignedIn"],"mappings":"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","file":"static/js/4.ad1a7f5a.chunk.js","sourcesContent":["import { LOADING_COMPLETE } from \"state/UIReducer\";\nimport { CATEGORIES, TRANSACTIONS } from \"state/AppReducer\";\n\nexport const fetchCategories = () => async (\n  dispatch,\n  getState,\n  { getFirebase, api }\n) => {\n  dispatch({\n    type: `${CATEGORIES}_PENDING`,\n  });\n\n  return api({\n    dispatch,\n    getState,\n    getFirebase,\n    path: \"categories\",\n  })\n    .then(({ categories } = {}) => {\n      dispatch({\n        type: `${CATEGORIES}_SUCCESS`,\n        payload: categories,\n      });\n\n      return categories;\n    })\n    .finally(() => {\n      dispatch(setLoadingComplete(\"categoryList\"));\n    });\n};\n\nexport const fetchTransactions = () => async (\n  dispatch,\n  getState,\n  { getFirebase, api }\n) => {\n  return api({\n    dispatch,\n    getState,\n    getFirebase,\n    path: \"transactions\",\n  })\n    .then(({ transactions } = {}) => {\n      dispatch({\n        type: `${TRANSACTIONS}_SUCCESS`,\n        payload: transactions,\n      });\n\n      return transactions;\n    })\n    .finally(() => {\n      dispatch(setLoadingComplete(\"overview\"));\n      dispatch(setLoadingComplete(\"overallSpending\"));\n      dispatch(setLoadingComplete(\"categoryBreakdown\"));\n      dispatch(setLoadingComplete(\"transactionOverview\"));\n    });\n};\n\nexport const setLoadingComplete = (componentName) => ({\n  type: `SET_${LOADING_COMPLETE}`,\n  payload: componentName,\n});\n","import { createSelector } from \"reselect\";\n\nexport const getCategoriesFromState = (state) => state.app.categories;\n\nexport const getBillCategories = createSelector(\n  [getCategoriesFromState],\n  (categories) => categories.filter(({ isBill }) => isBill)\n);\n\nexport const getDepositCategories = createSelector(\n  [getCategoriesFromState],\n  (categories) => categories.filter(({ isDeposit }) => isDeposit)\n);\n\nexport const getUnplannedCategories = createSelector(\n  [getCategoriesFromState],\n  (categories) =>\n    categories.filter(({ isBill, isDeposit }) => !isDeposit && !isBill)\n);\n","import { createSelector } from \"reselect\";\nimport {\n  format,\n  isAfter,\n  addMonths,\n  isSameMonth,\n  startOfMonth,\n} from \"date-fns\";\n\nimport {\n  getBillCategories,\n  getDepositCategories,\n  getUnplannedCategories,\n} from \"./CategorySelectors\";\n\nconst getActiveDateFromState = (state) => state.ui.date;\nconst getTransactionsFromState = (state) => state.app.transactions;\n\nconst filterTransactions = ({ thisMonth }) => (\n  transactions,\n  categories,\n  activeDate\n) => {\n  if (!transactions.length || !categories.length) {\n    return [];\n  }\n\n  const categoryIds = categories.map(({ id }) => id);\n\n  return transactions.filter(({ categoryId, date }) => {\n    const categoryIsIncluded = categoryIds.includes(categoryId);\n\n    return thisMonth\n      ? isSameMonth(date, activeDate) && categoryIsIncluded\n      : categoryIsIncluded &&\n          isAfter(new Date(date), startOfMonth(addMonths(activeDate, -12))) &&\n          !isAfter(new Date(date), activeDate);\n  });\n};\n\nconst getBillTransactions = createSelector(\n  [getTransactionsFromState, getBillCategories, getActiveDateFromState],\n  filterTransactions({ thisMonth: true })\n);\n\nconst getDepositTransactions = createSelector(\n  [getTransactionsFromState, getDepositCategories, getActiveDateFromState],\n  filterTransactions({ thisMonth: true })\n);\n\nconst getUnplannedTransactions = createSelector(\n  [getTransactionsFromState, getUnplannedCategories, getActiveDateFromState],\n  filterTransactions({ thisMonth: true })\n);\n\nexport const getMonthTransactions = createSelector(\n  [\n    getTransactionsFromState,\n    getBillTransactions,\n    getDepositTransactions,\n    getUnplannedTransactions,\n  ],\n  (all, bills, deposits, unplanned) => {\n    return {\n      all,\n      bills,\n      deposits,\n      unplanned,\n    };\n  }\n);\n\nexport const getYearTransactions = createSelector(\n  [getTransactionsFromState, getUnplannedCategories, getActiveDateFromState],\n  filterTransactions({ thisMonth: false })\n);\n\nexport const formatTransactionsForStackedBarGraph = createSelector(\n  [getTransactionsFromState, getUnplannedCategories, getActiveDateFromState],\n  (transactions, categories, activeDate) => {\n    if (!(transactions || []).length || !(categories || []).length) {\n      return null;\n    }\n\n    const unplannedIds = categories.map(({ id }) => id);\n    const range = Array(12)\n      .fill(0)\n      .map((_, index) => startOfMonth(addMonths(activeDate, -(11 - index))));\n\n    const transactionsByCategoryByMonth = transactions.reduce(\n      (byCategory, transaction) => {\n        // when the transaction is within the unplanned category\n        if (unplannedIds.includes(transaction.categoryId)) {\n          const category = categories.find(\n            (category) => category.id === transaction.categoryId\n          );\n\n          // if the category doesnt already exist in the accumulator\n          if (!byCategory[category.name]) {\n            byCategory[category.name] = {\n              label: category.name,\n              backgroundColor: category.color,\n              // data represents months as an array\n              // 0 = oldest month\n              // 11 = newest month\n              data: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n            };\n          }\n\n          // now find the index within the range corresponding to this transaction\n          const monthIndex = range.findIndex((date) =>\n            isSameMonth(date, transaction.date)\n          );\n\n          // update the category data @ the index just located\n          byCategory[category.name].data[monthIndex] += transaction.amount;\n        }\n\n        return byCategory;\n      },\n      {}\n    );\n\n    return {\n      datasets: Object.values(transactionsByCategoryByMonth),\n      labels: range.map((month) => format(month, \"MMM yyyy\")),\n    };\n  }\n);\n","import React from \"react\";\nimport cn from \"classnames\";\nimport PropTypes from \"prop-types\";\n\nimport \"./Card.scss\";\n\nconst Card = ({\n  title,\n  children,\n  className,\n  small = false,\n  wrapped = false,\n  optionalContent,\n  centered = false,\n  flexContent = true,\n  gridContent = false,\n  transparent = false,\n  spaceBetween = false,\n}) => {\n  return (\n    <div\n      className={cn(\n        \"Card\",\n        {\n          CardSmall: small,\n          CardTransparent: transparent,\n        },\n        className\n      )}\n    >\n      {(title || optionalContent) && (\n        <div className=\"Row\">\n          {!!title && <p className=\"title\">{title}</p>}\n          {optionalContent}\n        </div>\n      )}\n\n      {wrapped ? (\n        <div\n          className={cn(\"content\", {\n            grid: gridContent,\n            flex: flexContent,\n            centered: centered,\n            \"space-between\": spaceBetween,\n          })}\n        >\n          {children}\n        </div>\n      ) : (\n        children\n      )}\n    </div>\n  );\n};\n\nCard.propTypes = {\n  small: PropTypes.bool,\n  title: PropTypes.string,\n  wrapped: PropTypes.bool,\n  children: PropTypes.node,\n  centered: PropTypes.bool,\n  flexContent: PropTypes.bool,\n  gridContent: PropTypes.bool,\n  className: PropTypes.string,\n  transparent: PropTypes.bool,\n  spaceBetween: PropTypes.bool,\n  optionalContent: PropTypes.node,\n};\n\nexport default Card;\n","import React, { useState } from \"react\";\nimport cn from \"classnames\";\nimport { format, addMonths, isSameMonth, startOfMonth } from \"date-fns\";\nimport { connect } from \"react-redux\";\n\nimport { ChevronLeft32, ChevronRight32 } from \"@carbon/icons-react\";\n\nimport Card from \"components/Card/Card\";\n\nimport isThisMonth from \"date-fns/isThisMonth\";\nimport {\n  setMonthAction,\n  fetchTransactionsByMonthAction,\n} from \"./MonthDisplayActions\";\n\nimport \"./MonthDisplay.scss\";\n\nconst MonthDisplay = ({\n  date,\n  setMonth,\n  classNames,\n  fetchTransactionsByMonth,\n}) => {\n  const [fetchedMonth, setFetchedMonth] = useState([date]);\n\n  if (!date) {\n    return null;\n  }\n\n  const onNext = () => {\n    const nextMonth = addMonths(date, 1);\n\n    setMonth(nextMonth);\n  };\n\n  const onPrevious = () => {\n    const previousMonth = addMonths(date, -1);\n\n    if (!fetchedMonth.some((month) => isSameMonth(previousMonth, month))) {\n      const yearAndOneMonth = startOfMonth(addMonths(previousMonth, -12));\n\n      setFetchedMonth(fetchedMonth.concat(previousMonth));\n      fetchTransactionsByMonth(yearAndOneMonth.getTime());\n    }\n\n    setMonth(previousMonth);\n  };\n\n  const isDisabled = isThisMonth(date);\n\n  return (\n    <Card small transparent className={cn(\"MonthDisplay\", classNames)}>\n      <div className=\"wrapper flex centered space-between\">\n        <button\n          type=\"button\"\n          onClick={onPrevious}\n          className={cn(\"Button\", \"PreviousMonth\")}\n        >\n          <ChevronLeft32 />\n        </button>\n\n        <p className=\"Month\">{format(date, \"MMM yyyy\")}</p>\n\n        <button\n          type=\"button\"\n          onClick={onNext}\n          disabled={isDisabled}\n          className={cn(\"Button\", \"NextMonth\")}\n        >\n          <ChevronRight32 />\n        </button>\n      </div>\n    </Card>\n  );\n};\n\nconst mapDispatchToProps = {\n  setMonth: setMonthAction,\n  fetchTransactionsByMonth: fetchTransactionsByMonthAction,\n};\n\nconst mapStateToProps = (state) => ({\n  date: state.ui.date,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MonthDisplay);\n","import { DATE } from \"state/UIReducer\";\nimport { TRANSACTIONS } from \"state/AppReducer\";\n\nexport const setMonthAction = (month) => (\n  dispatch,\n  getState,\n  { getFirebase, api },\n  ...rest\n) => {\n  dispatch({\n    type: `SET_${DATE}`,\n    payload: month,\n  });\n};\n\nexport const fetchTransactionsByMonthAction = (body) => async (\n  dispatch,\n  getState,\n  { getFirebase, api }\n) => {\n  return api({\n    body,\n    dispatch,\n    getState,\n    getFirebase,\n    path: \"transactionsByMonth\",\n  }).then(({ transactionsByMonth }) => {\n    dispatch({\n      type: `${TRANSACTIONS}_BY_MONTH_SUCCESS`,\n      payload: transactionsByMonth,\n    });\n  });\n};\n","import React from \"react\";\nimport cn from \"classnames\";\nimport PropTypes from \"prop-types\";\n\nimport { InlineLoading, Modal as DefaultModal } from \"carbon-components-react\";\n\nimport \"./Modal.scss\";\n\nconst Modal = ({\n  title,\n  isOpen,\n  children,\n  className,\n  isDisabled,\n  isSubmitting,\n  isScrollable,\n  handleCloseModal,\n  handlePrimaryClick,\n  handleSecondaryClick,\n  handleCloseModalComplete,\n  ...props\n}) => {\n  const onCloseModal = async () => {\n    await handleCloseModal();\n\n    if (handleCloseModalComplete) {\n      setTimeout(() => {\n        handleCloseModalComplete();\n      }, 300);\n    }\n  };\n  return (\n    <DefaultModal\n      hasForm\n      open={isOpen}\n      modalHeading={title}\n      secondaryButtonText=\"Clear\"\n      onRequestClose={onCloseModal}\n      aria-label={`${title} Modal`}\n      hasScrollingContent={isScrollable}\n      onRequestSubmit={handlePrimaryClick}\n      onSecondarySubmit={handleSecondaryClick}\n      primaryButtonText={\n        isSubmitting ? <InlineLoading /> : props.primaryButtonText || \"Submit\"\n      }\n      {...props}\n      className={cn(\n        \"Modal\",\n        {\n          \"Modal--disabled\": isDisabled,\n          \"Modal--submitting\": isSubmitting,\n        },\n        className\n      )}\n    >\n      {children}\n    </DefaultModal>\n  );\n};\n\nModal.defaultProps = {\n  preventCloseOnClickOutside: true,\n};\n\nModal.propTypes = {\n  size: PropTypes.string,\n  hasForm: PropTypes.bool,\n  children: PropTypes.node,\n  isDisabled: PropTypes.bool,\n  className: PropTypes.string,\n  isSubmitting: PropTypes.bool,\n  isScrollable: PropTypes.bool,\n  isOpen: PropTypes.bool.isRequired,\n  title: PropTypes.string.isRequired,\n  handleCloseModalComplete: PropTypes.func,\n  preventCloseOnClickOutside: PropTypes.bool,\n  handleCloseModal: PropTypes.func.isRequired,\n  handlePrimaryClick: PropTypes.func.isRequired,\n  handleSecondaryClick: PropTypes.func.isRequired,\n};\n\nexport default Modal;\n","import React from \"react\";\n\nimport { TextInput, Checkbox } from \"carbon-components-react\";\n\n// const SET_FORM_DIRTY = \"SET_FORM_DIRTY\";\n// const SET_FORM_VALUES = \"SET_FORM_VALUES\";\n// const SET_MODAL_IS_OPEN = \"SET_MODAL_IS_OPEN\";\n// const SET_FORM_SUBMITTING = \"SET_FORM_SUBMITTING\";\n// const SET_FORM_FIELDS_MOUNTED = \"SET_FORM_FIELDS_MOUNTED\";\n\nconst initialState = {\n  values: {\n    name: \"\",\n    isBill: false,\n    isDeposit: false,\n  },\n  state: {\n    isModalOpen: false,\n    isFormDirty: false,\n    isSubmitting: false,\n    areFieldsMounted: false,\n  },\n};\n\nconst CategoryFormFields = ({ formValues, setFormValues }) => {\n  const handleSetFormValues = (key) => (e) => {\n    setFormValues({ [key]: e?.target?.value || e });\n  };\n\n  return (\n    <>\n      <div className=\"Row\">\n        <TextInput\n          id=\"name\"\n          labelText=\"Name\"\n          autoComplete=\"off\"\n          value={formValues.name}\n          onChange={handleSetFormValues(\"name\")}\n        />\n      </div>\n      <div className=\"Row\">\n        <Checkbox\n          id=\"isBill\"\n          labelText=\"Bill?\"\n          checked={formValues.isBill}\n          onChange={handleSetFormValues(\"isBill\")}\n        />\n        <Checkbox\n          id=\"isDeposit\"\n          labelText=\"Deposit?\"\n          checked={formValues.isDeposit}\n          onChange={handleSetFormValues(\"isDeposit\")}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default CategoryFormFields;\n\nexport const getInitialState = (importedState) => ({\n  ...initialState,\n  ...importedState,\n});\n\n// const reducer = (initialState, { type, payload }) => {\n//   switch (type) {\n//     case SET_FORM_DIRTY:\n//       return {\n//         ...initialState,\n//         state: {\n//           ...initialState.state,\n//           isFormDirty: payload,\n//         },\n//       };\n\n//     case SET_FORM_VALUES:\n//       return {\n//         values: {\n//           ...initialState.values,\n//           ...payload,\n//         },\n//         state: {\n//           ...initialState.state,\n//           isFormDirty: true,\n//         },\n//       };\n\n//     case SET_MODAL_IS_OPEN:\n//       return {\n//         ...initialState,\n//         state: {\n//           ...initialState.state,\n//           isModalOpen: payload,\n//         },\n//       };\n\n//     case SET_FORM_SUBMITTING:\n//       return {\n//         ...initialState,\n//         state: {\n//           ...initialState.state,\n//           isSubmitting: payload,\n//           isFormDirty: false,\n//         },\n//       };\n\n//     case SET_FORM_FIELDS_MOUNTED:\n//       return {\n//         ...initialState,\n//         state: {\n//           ...initialState.state,\n//           areFieldsMounted: payload,\n//           isFormDirty: false,\n//         },\n//       };\n\n//     default:\n//       return initialState;\n//   }\n// };\n\nexport const useFormState = (importedState = {}) => {\n  // const [state, dispatch] = useReducer(reducer, getInitialState(importedState));\n  // const createAction = (type) => (payload) => dispatch({ type, payload });\n\n  return [\n    // state,\n    {},\n    {\n      // setFormValues: createAction(SET_FORM_VALUES),\n      // setIsFormDirty: createAction(SET_FORM_DIRTY),\n      // setIsModalOpen: createAction(SET_MODAL_IS_OPEN),\n      // setIsSubmitting: createAction(SET_FORM_SUBMITTING),\n      // setAreFieldsMounted: createAction(SET_FORM_FIELDS_MOUNTED),\n    },\n  ];\n};\n","const toCurrency = (amount) =>\n  isNaN(amount)\n    ? 0\n    : new Intl.NumberFormat(\"en-US\", {\n        style: \"currency\",\n        currency: \"USD\",\n      }).format(amount);\n\nexport const asNumber = (amount) => (!amount ? 0 : Number(amount.substr(1)));\nexport default toCurrency;\n","import React from \"react\";\n\nimport \"./Category.scss\";\n\nimport toCurrency from \"utils/currency\";\n\nconst Category = ({ name, quantity, total, color, handleOnClick }) => (\n  <li\n    className=\"Category\"\n    onClick={handleOnClick}\n    style={{\n      borderLeftColor: color,\n    }}\n  >\n    <div className=\"left\">\n      <span className=\"title\">{name}</span>\n      <span className=\"transactions\">\n        {quantity} transaction{quantity === 1 ? \"\" : \"s\"}\n      </span>\n    </div>\n    <div className=\"right flex align-center\">\n      <span className=\"amount\">{toCurrency(total)}</span>\n    </div>\n  </li>\n);\n\nexport default Category;\n","const filters = {\n  ALL: \"All\",\n  BILLS: \"Bills\",\n  DEPOSITS: \"Deposits\",\n  UNPLANNED: \"Unplanned\",\n};\n\nexport default filters;\n","import React from \"react\";\n\nimport FILTERS from \"./utils/filters\";\n\nimport { Select, SelectItem } from \"carbon-components-react\";\n\nconst CategoryFilter = ({ setFilter }) => {\n  const filterCategory = (e) => {\n    setFilter(FILTERS[e.target.value]);\n  };\n\n  return (\n    <Select\n      light\n      inline\n      dir=\"rtl\"\n      size=\"sm\"\n      labelText=\"Filter\"\n      id=\"CategoryFilters\"\n      className=\"CategoryFilters\"\n      onChange={filterCategory}\n    >\n      {Object.keys(FILTERS).map((filter, index) => (\n        <SelectItem\n          value={filter}\n          text={FILTERS[filter]}\n          key={`filtercategory-${index}`}\n        />\n      ))}\n    </Select>\n  );\n};\n\nexport default CategoryFilter;\n","import React from \"react\";\nimport cn from \"classnames\";\nimport { SkeletonText } from \"carbon-components-react\";\n\nimport \"./Category.scss\";\n\nconst CategorySkeleton = () => (\n  <li\n    className={cn(\"Category\", \"CategorySkeleton\")}\n    style={{\n      borderLeftColor: `var(--shadow)`,\n    }}\n  >\n    <div className=\"left\">\n      <span className=\"title\">\n        <SkeletonText />\n      </span>\n      <span className=\"transactions\">\n        <SkeletonText />\n      </span>\n    </div>\n    <div className=\"right flex align-center\">\n      <span className=\"amount\">\n        <SkeletonText />\n      </span>\n    </div>\n  </li>\n);\n\nexport default CategorySkeleton;\n","const colors = [\n  \"#f79694\",\n  \"#f7b494\",\n  \"#f7f794\",\n  \"#c6f794\",\n  \"#94f794\",\n  \"#94f7c6\",\n  \"#94f7f7\",\n  \"#94c6f7\",\n  \"#9494f7\",\n  \"#c694f7\",\n  \"#f794f7\",\n  \"#f794c6\",\n  \"#945a59\",\n  \"#947759\",\n  \"#949459\",\n  \"#779459\",\n  \"#599459\",\n  \"#599477\",\n  \"#599494\",\n  \"#597794\",\n  \"#775994\",\n  \"#945994\",\n  \"#593635\",\n  \"#594735\",\n  \"#475935\",\n  \"#355947\",\n  \"#355959\",\n  \"#354759\",\n  \"#353559\",\n  \"#593559\",\n  \"#473559\",\n  \"#352020\",\n  \"#352b20\",\n  \"#2b3520\",\n  \"#20352b\",\n  \"#203535\",\n  \"#202b35\",\n  \"#352035\",\n  \"#2b2035\",\n];\n\nexport default colors;\n","import cn from \"classnames\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Add32 } from \"@carbon/icons-react\";\n\nimport colors from \"utils/colors\";\n\nimport Modal from \"components/Modal/Modal\";\n\nimport { enqueueNotification } from \"components/NotificationCenter/NotificationActions\";\n\nimport Fields, {\n  useFormState,\n  getInitialState,\n} from \"components/Forms/Category/Fields\";\n\nimport { addCategoryAction } from \"./AddCategoryFormActions\";\n\nconst AddCategoryForm = ({ notify, categories, addCategory }) => {\n  const [\n    {\n      values,\n      state: { isModalOpen, isSubmitting, areFieldsMounted },\n    },\n    { setFormValues, setIsModalOpen, setIsSubmitting, setAreFieldsMounted },\n  ] = useFormState();\n\n  const handleOpenModal = () => {\n    setAreFieldsMounted(true);\n    setIsModalOpen(true);\n  };\n\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n\n    return;\n  };\n\n  const handleClearForm = () => {\n    setFormValues(getInitialState());\n  };\n\n  const handleSubmitForm = () => {\n    let newColor = \"#cccccc\";\n\n    if (!values.isBill && !values.isDeposit) {\n      const categoryColors = categories.map(({ color }) => color);\n\n      const [nextColor] = colors.filter((hex) => !categoryColors.includes(hex));\n\n      newColor = nextColor;\n    }\n\n    const finalValues = {\n      ...values,\n      color: newColor,\n    };\n\n    setIsSubmitting(true);\n\n    addCategory(finalValues)\n      .then((resp) => {\n        if (!resp?.errors) {\n          handleCloseModal();\n          notify({\n            type: \"success\",\n            subtitle: `You have successfully added a the ${values.name} category.`,\n          });\n        }\n      })\n      .finally(() => {\n        setIsSubmitting(false);\n        setAreFieldsMounted(false);\n      });\n  };\n\n  return (\n    <>\n      <Modal\n        isScrollable\n        isOpen={isModalOpen}\n        title=\"Add Category\"\n        className=\"AddCategoryModal\"\n        isSubmitting={isSubmitting}\n        handleCloseModal={handleCloseModal}\n        handlePrimaryClick={handleSubmitForm}\n        handleSecondaryClick={handleClearForm}\n        isDisabled={!values.name.length || isSubmitting}\n      >\n        {areFieldsMounted && (\n          <div className=\"CategoryFormFields\">\n            <Fields formValues={values} setFormValues={setFormValues} />\n          </div>\n        )}\n      </Modal>\n      <div className=\"AddCategory\">\n        <button\n          type=\"button\"\n          className={cn(\"Button\", \"Button--Primary\")}\n          onClick={handleOpenModal}\n        >\n          <Add32 /> Add Category\n        </button>\n      </div>\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  categories: state.app.categories,\n});\n\nconst mapDispatchToProps = {\n  notify: enqueueNotification,\n  addCategory: addCategoryAction,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddCategoryForm);\n","import { CATEGORIES } from \"state/AppReducer\";\n\nexport const addCategoryAction = (body) => async (\n  dispatch,\n  getState,\n  { getFirebase, api }\n) => {\n  dispatch({\n    type: `ADD_${CATEGORIES}_PENDING`,\n  });\n\n  return api({\n    body,\n    dispatch,\n    getState,\n    getFirebase,\n    path: \"addCategory\",\n  }).then(({ addCategory }) => {\n    dispatch({\n      type: `ADD_${CATEGORIES}_SUCCESS`,\n      payload: body,\n    });\n\n    return addCategory;\n  });\n};\n","const getCategory = (categories, id) =>\n  (categories || []).find((category) => category.id === id);\n\nconst defaultBreakdown = {\n  total: 0,\n  quantity: 0,\n  transactions: [],\n};\n\n// given an array of transactions, group them by category\n// return them as an array sorted by the total spent in that category\nconst splitIntoCategories = ({ transactions, categories }) => {\n  if (!categories.length) {\n    return [];\n  }\n\n  const transactionsForThisMonth = transactions.reduce(\n    (byCategory, transaction) => {\n      const { categoryId } = transaction;\n\n      const category = getCategory(categories, categoryId);\n\n      if (!byCategory[category.name]) {\n        byCategory[category.name] = {\n          ...defaultBreakdown,\n          ...category,\n        };\n      }\n\n      byCategory[category.name].quantity += 1;\n      byCategory[category.name].transactions.push(transaction);\n      byCategory[category.name].total += transaction.amount;\n\n      return byCategory;\n    },\n    {}\n  );\n\n  const byCategory = categories.map((category) => ({\n    ...category,\n    ...defaultBreakdown,\n    ...transactionsForThisMonth[category.name],\n  }));\n\n  const entries = Object.entries(byCategory);\n\n  entries.sort((a, b) => b[1].total - a[1].total);\n\n  return entries.map(([key, value]) => value);\n};\n\nexport default splitIntoCategories;\n","import cn from \"classnames\";\nimport { connect } from \"react-redux\";\nimport React, { useState, useEffect } from \"react\";\n\nimport Card from \"components/Card/Card\";\nimport Modal from \"components/Modal/Modal\";\nimport { enqueueNotification } from \"components/NotificationCenter/NotificationActions\";\nimport Fields, {\n  useFormState,\n  getInitialState,\n} from \"../Forms/Category/Fields.jsx\";\n\nimport Category from \"./Category\";\nimport CategoryFilter from \"./CategoryFilter\";\nimport CategorySkeleton from \"./CategorySkeleton\";\nimport AddCategoryForm from \"./AddCategoryForm/AddCategoryForm\";\n\nimport { editCategoryAction } from \"./CategoryListActions\";\n\nimport FILTERS from \"./utils/filters\";\nimport splitIntoCategories from \"./utils/splitIntoCategories\";\n\nimport {\n  getBillCategories,\n  getDepositCategories,\n  getUnplannedCategories,\n} from \"state/selectors/CategorySelectors\";\n\nimport \"./CategoryList.scss\";\n\nconst CategoryList = ({\n  bills,\n  notify,\n  deposits,\n  isLoading,\n  unplanned,\n  classNames,\n  categories,\n  editCategory,\n}) => {\n  const [filter, setFilter] = useState(FILTERS.ALL);\n  const [combinedCategories, setCombinedCategories] = useState([]);\n  const [\n    {\n      values,\n      state: { isModalOpen, isFormDirty, isSubmitting, areFieldsMounted },\n    },\n    {\n      setFormValues,\n      setIsFormDirty,\n      setIsModalOpen,\n      setIsSubmitting,\n      setAreFieldsMounted,\n    },\n  ] = useFormState();\n\n  useEffect(() => {\n    setCombinedCategories(\n      splitIntoCategories(\n        filter === FILTERS.ALL\n          ? {\n              categories,\n              transactions: (bills || [])\n                .concat(deposits || [])\n                .concat(unplanned || []),\n            }\n          : filter === FILTERS.BILLS\n          ? {\n              categories: getBillCategories({ app: { categories } }),\n              transactions: bills,\n            }\n          : filter === FILTERS.DEPOSITS\n          ? {\n              categories: getDepositCategories({ app: { categories } }),\n              transactions: deposits,\n            }\n          : {\n              categories: getUnplannedCategories({ app: { categories } }),\n              transactions: unplanned,\n            }\n      )\n    );\n  }, [filter, unplanned, deposits, categories, bills]);\n\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n\n    return;\n  };\n\n  const handleSubmitForm = () => {\n    setIsSubmitting(true);\n\n    editCategory(values)\n      .then((resp) => {\n        if (!resp?.errors) {\n          handleCloseModal();\n          notify({\n            type: \"success\",\n            subtitle: `You have successfully updated a the ${values.name} category.`,\n          });\n        }\n      })\n      .finally(() => {\n        setIsSubmitting(false);\n        setAreFieldsMounted(false);\n      });\n  };\n\n  const handleClearForm = () => {\n    setFormValues(getInitialState());\n  };\n\n  const handleEditCategory = ({ total, quantity, ...category }) => () => {\n    setAreFieldsMounted(true);\n    setFormValues(category);\n    setIsFormDirty(false);\n    setIsModalOpen(true);\n  };\n\n  const handleUnmountFields = () => {\n    setAreFieldsMounted(false);\n  };\n\n  return (\n    <Card\n      wrapped\n      gridContent\n      flexContent={false}\n      title=\"Category List\"\n      className={cn(\"CategoryList\", classNames)}\n      optionalContent={<CategoryFilter setFilter={setFilter} />}\n    >\n      <Modal\n        isOpen={isModalOpen}\n        title=\"Edit Category\"\n        isSubmitting={isSubmitting}\n        handleCloseModal={handleCloseModal}\n        handlePrimaryClick={handleSubmitForm}\n        handleSecondaryClick={handleClearForm}\n        isDisabled={!isFormDirty || isSubmitting}\n        handleCloseModalComplete={handleUnmountFields}\n      >\n        {areFieldsMounted && (\n          <div className=\"CategoryFormFields\">\n            <Fields formValues={values} setFormValues={setFormValues} />\n          </div>\n        )}\n      </Modal>\n      <ul className=\"Categories\">\n        {isLoading\n          ? Array(6)\n              .fill(CategorySkeleton)\n              .map((Component, index) => (\n                <Component key={`CategorySkeleton-${index}`} />\n              ))\n          : combinedCategories.map((category, id) => (\n              <Category\n                {...category}\n                key={`Category-${id}`}\n                handleOnClick={handleEditCategory(category)}\n              />\n            ))}\n      </ul>\n      <AddCategoryForm />\n    </Card>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  categories: state.app.categories,\n  isLoading: state.ui.dashboard.isLoading.categoryList,\n});\n\nconst mapDispatchToProps = {\n  notify: enqueueNotification,\n  editCategory: editCategoryAction,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CategoryList);\n","import { CATEGORIES } from \"state/AppReducer\";\n\nexport const editCategoryAction = (body) => async (\n  dispatch,\n  getState,\n  { getFirebase, api }\n) => {\n  dispatch({\n    type: `EDIT_${CATEGORIES}_PENDING`,\n  });\n\n  return api({\n    body,\n    dispatch,\n    getState,\n    getFirebase,\n    path: \"editCategory\",\n  }).then(({ editCategory }) => {\n    dispatch({\n      type: `EDIT_${CATEGORIES}_SUCCESS`,\n      payload: body,\n    });\n\n    return editCategory;\n  });\n};\n","const getCategory = (categories, id) =>\n  (categories || []).find((category) => category.id === id);\n\n// given an array of transactions, group them by category\n// return them as an array sorted by the total spent in that category\nconst formatTransactionsForChart = (transactions, categories) => {\n  if (!transactions.length || !categories.length) {\n    return [];\n  }\n\n  const transactionsForThisMonth = transactions.reduce(\n    (byCategory, transaction) => {\n      const { categoryId } = transaction;\n\n      const category = getCategory(categories, categoryId);\n\n      if (!byCategory[category.name]) {\n        byCategory[category.name] = {\n          total: 0,\n          color: category.color,\n        };\n      }\n\n      byCategory[category.name].total += transaction.amount;\n\n      return byCategory;\n    },\n    {}\n  );\n\n  const entries = Object.entries(transactionsForThisMonth);\n\n  entries.sort((a, b) => b[1].total - a[1].total);\n\n  return {\n    datasets: [\n      {\n        data: entries.map(([key, value]) => value.total),\n        backgroundColor: entries.map(([key, value]) => value.color),\n      },\n    ],\n    labels: entries.map(([key]) => key),\n  };\n};\n\nexport default formatTransactionsForChart;\n","import React from \"react\";\nimport cn from \"classnames\";\nimport { connect } from \"react-redux\";\nimport { Doughnut } from \"react-chartjs-2\";\nimport { InlineLoading } from \"carbon-components-react\";\n\nimport Card from \"components/Card/Card\";\n\nimport formatTransactionsForChart from \"./utils/formatTransactionsForChart\";\n\nimport \"./OverviewChart.scss\";\n\n//TODO: proptypes\n\nconst OverviewChart = ({ isLoading, unplanned, classNames, categories }) => {\n  const data = formatTransactionsForChart(unplanned, categories);\n\n  return (\n    <Card\n      wrapped\n      centered\n      title=\"Overview\"\n      className={cn(\"OverviewChart\", classNames)}\n    >\n      {isLoading ? (\n        <InlineLoading />\n      ) : (\n        Array.isArray(data?.datasets?.[0]?.data) && (\n          <Doughnut\n            options={{\n              cutoutPercentage: 75,\n              circumference: Math.PI,\n              rotation: Math.PI,\n              legend: {\n                display: false,\n              },\n            }}\n            data={data}\n          />\n        )\n      )}\n    </Card>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  categories: state.app.categories,\n  isLoading: state.ui.dashboard.isLoading.overview,\n});\n\nexport default connect(mapStateToProps)(OverviewChart);\n","import React from \"react\";\nimport clone from \"clone-deep\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\n\nimport {\n  Select,\n  TextInput,\n  SelectItem,\n  DatePicker,\n  NumberInput,\n  DatePickerInput,\n} from \"carbon-components-react\";\n\nimport { CategoryProps } from \"definitions\";\n\nimport \"./AddTransaction.scss\";\n\nconst AddTransactionForm = ({ formValues, setFormValues, categories }) => {\n  const setState = (key) => (value) => {\n    const nextState = {\n      ...formValues,\n      [key]: isNaN(value) ? value : Number(value),\n    };\n\n    setFormValues(nextState);\n  };\n\n  const handleInputChange = (fieldName) => (e) => {\n    setState(fieldName)(e.target.value);\n  };\n\n  const handleDateChange = (args) => {\n    let date;\n    // this is a DatePicker calendar select\n    if (Array.isArray(args)) {\n      date = args[0];\n    } else {\n      date = new Date(args.target.value);\n    }\n\n    setState(\"date\")(date.getTime());\n  };\n\n  const sortedCategories = () => {\n    let unsortedCategories = clone(categories);\n\n    unsortedCategories.sort((a, b) => (a.name > b.name ? 1 : -1));\n\n    return unsortedCategories;\n  };\n\n  return (\n    <div className=\"AddTransactionForm\">\n      <div className=\"Row\">\n        <NumberInput\n          id=\"amount\"\n          label=\"Amount *\"\n          allowEmpty={false}\n          onChange={handleInputChange(\"amount\")}\n          invalidText=\"Please provide a valid amount\"\n        />\n      </div>\n      <div className=\"flex space-between split no-flex\">\n        <Select\n          light\n          id=\"category\"\n          label=\"Category\"\n          placeholder=\"Filter...\"\n          onChange={handleInputChange(\"categoryId\")}\n          className=\"CategoryDropdown\"\n        >\n          {sortedCategories().map((category, index) => (\n            <SelectItem\n              key={`Select-option-${index}`}\n              value={category.id}\n              text={category.name}\n            />\n          ))}\n        </Select>\n\n        <DatePicker datePickerType=\"single\" onChange={handleDateChange}>\n          <DatePickerInput\n            required\n            id=\"paidOn\"\n            labelText=\"Date *\"\n            placeholder=\"MM/DD/YYYY\"\n            onChange={handleDateChange}\n            autoComplete={\"off\"}\n          />\n        </DatePicker>\n      </div>\n      <div className=\"Row\">\n        <TextInput\n          id=\"description\"\n          labelText=\"Description\"\n          onChange={handleInputChange(\"description\")}\n        />\n      </div>\n    </div>\n  );\n};\n\nAddTransactionForm.propTypes = {\n  formValues: PropTypes.object,\n  setFormValues: PropTypes.func,\n  categories: PropTypes.arrayOf(CategoryProps),\n};\n\nconst mapStateToProps = (state) => ({\n  categories: state.app.categories,\n});\n\nexport default connect(mapStateToProps)(AddTransactionForm);\n","import PropTypes from \"prop-types\";\n\nexport default PropTypes.shape({\n  id: PropTypes.string,\n  isBill: PropTypes.bool,\n  isDeposit: PropTypes.bool,\n  name: PropTypes.string.isRequired,\n  color: PropTypes.string.isRequired,\n});\n","import React from \"react\";\nimport { parse } from \"papaparse\";\nimport PropTypes from \"prop-types\";\nimport { FileUploader } from \"carbon-components-react\";\n\nimport \"./ImportStatement.scss\";\n\nconst ImportStatementForm = ({ formValues, setFormValues }) => {\n  const stateName = \"csv\";\n\n  const setState = (key) => (value) => {\n    const nextState = {\n      ...formValues,\n      [key]: isNaN(value) ? value : Number(value),\n    };\n\n    setFormValues(nextState);\n  };\n\n  const clearState = () => {\n    setState(stateName)();\n  };\n\n  const handleFileUpload = async (e) => {\n    const [file] = e.target.files;\n\n    const toString = (file) =>\n      new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.readAsText(file);\n        reader.onload = () => resolve(reader.result);\n        reader.onerror = (error) => reject(error);\n      });\n\n    const data = await toString(file);\n\n    const { data: parsedData } = parse(data, {\n      skipEmptyLines: true,\n    });\n\n    setState(stateName)(\n      parsedData\n        .slice(1)\n        .map(([date, description, paidOn, depositedOn, category]) => ({\n          category,\n          description,\n          date: new Date(date).getTime(),\n          amount: Number(paidOn || depositedOn) || 0,\n        }))\n    );\n  };\n\n  return (\n    <div className=\"ImportStatementForm\">\n      <div className=\"Row\">\n        <p className=\"bx--label-description no-margin\">\n          Please format the file in this order \"date\", \"description\", \"debit\",\n          \"credit\", \"category\"\n        </p>\n      </div>\n      <div className=\"Row\">\n        <FileUploader\n          labelTitle=\"File\"\n          accept={[\".csv\"]}\n          filenameStatus=\"edit\"\n          onDelete={clearState}\n          className=\"FileUploader\"\n          buttonLabel=\"Choose File\"\n          onChange={handleFileUpload}\n          iconDescription=\"Clear file\"\n          labelDescription=\"Only .csv files are accepted.\"\n        />\n      </div>\n    </div>\n  );\n};\n\nImportStatementForm.propTypes = {\n  formValues: PropTypes.object,\n  setFormValues: PropTypes.func,\n};\n\nexport default ImportStatementForm;\n","import cn from \"classnames\";\nimport { connect } from \"react-redux\";\nimport React, { useState, useEffect } from \"react\";\n\nimport Card from \"components/Card/Card\";\nimport Modal from \"components/Modal/Modal\";\n\nimport AddTransactionForm from \"components/AddTransaction/forms/AddTransaction\";\nimport ImportStatementForm from \"components/AddTransaction/forms/ImportStatement\";\n\nimport { fetchTransactions } from \"controllers/Home/DashboardActions\";\nimport { enqueueNotification } from \"components/NotificationCenter/NotificationActions\";\nimport {\n  addTransactionAction,\n  importStatementAction,\n} from \"components/AddTransaction/AddTransactionActions\";\n\nimport \"./AddTransaction.scss\";\n\nconst MODAL_TYPES = {\n  ADD: \"ADD\",\n  IMPORT: \"IMPORT\",\n};\n\nconst INITIAL_FORM_VALUES = {\n  [MODAL_TYPES.ADD]: {\n    amount: 0,\n    date: 0,\n    categoryId: \"\",\n    description: \"\",\n  },\n  [MODAL_TYPES.IMPORT]: {\n    csv: [],\n  },\n};\n\nconst AddTransaction = ({\n  notify,\n  addTransaction,\n  categoriesExist,\n  getTransactions,\n  importStatement,\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [modalType, setModalType] = useState(\"\");\n  const [formValues, setFormValues] = useState({});\n  const [isAddModal, setIsAddModal] = useState(false);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  useEffect(() => {\n    const _isAddModal = modalType === MODAL_TYPES.ADD;\n\n    setIsAddModal(_isAddModal);\n    setFormValues(\n      INITIAL_FORM_VALUES[_isAddModal ? MODAL_TYPES.ADD : MODAL_TYPES.IMPORT]\n    );\n  }, [modalType]);\n\n  const Form = isAddModal ? AddTransactionForm : ImportStatementForm;\n\n  const modalTitle = isAddModal ? \"Add Transaction\" : \"Import Statement\";\n\n  const handleOpenModal = (type) => () => {\n    setModalType(type);\n    setIsOpen(true);\n  };\n\n  const handleCloseModal = () => {\n    setIsOpen(false);\n\n    setTimeout(() => {\n      handleClearForm();\n    }, 300);\n  };\n\n  const handleClearForm = () => {\n    setModalType(\"\");\n  };\n\n  const handleSubmitForm = () => {\n    setIsSubmitting(true);\n    const submitAction = isAddModal ? addTransaction : importStatement;\n\n    submitAction(formValues)\n      .then((resp) => {\n        if (!resp?.errors) {\n          const subtitle = isAddModal\n            ? \"You successfully added an transaction\"\n            : \"You successfully imported transactions\";\n          handleCloseModal();\n          notify({\n            subtitle,\n            type: \"success\",\n          });\n          getTransactions();\n          setFormValues({});\n        }\n      })\n      .finally(() => {\n        setIsSubmitting(false);\n      });\n  };\n\n  const handleDisableState = () => {\n    if (isAddModal) {\n      return !formValues.amount || !formValues.date;\n    }\n\n    return !(formValues.csv || []).length;\n  };\n\n  return (\n    <Card small transparent className=\"AddTransaction\">\n      <Modal\n        isScrollable\n        isOpen={isOpen}\n        title={modalTitle}\n        isSubmitting={isSubmitting}\n        handleCloseModal={handleCloseModal}\n        handlePrimaryClick={handleSubmitForm}\n        handleSecondaryClick={handleClearForm}\n        handleCloseModalComplete={handleClearForm}\n        isDisabled={isSubmitting || handleDisableState()}\n      >\n        {!!modalType && (\n          <Form setFormValues={setFormValues} formValues={formValues} />\n        )}\n      </Modal>\n      <button\n        type=\"button\"\n        className={cn(\"Button\", \"Button--Primary\", {\n          \"Button--Primary-disabled\": !categoriesExist,\n        })}\n        onClick={handleOpenModal(MODAL_TYPES.IMPORT)}\n      >\n        Import Statement\n      </button>\n      <button\n        type=\"button\"\n        className={cn(\"Button\")}\n        onClick={handleOpenModal(MODAL_TYPES.ADD)}\n      >\n        Add Transaction\n      </button>\n    </Card>\n  );\n};\n\nconst mapDispatchToProps = {\n  notify: enqueueNotification,\n  getTransactions: fetchTransactions,\n  addTransaction: addTransactionAction,\n  importStatement: importStatementAction,\n};\n\nconst mapStateToProps = (state) => ({\n  categoriesExist: !!state.app.categories.length,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddTransaction);\n","import { TRANSACTIONS, STATEMENT } from \"state/AppReducer\";\n\nexport const addTransactionAction = (body) => async (\n  dispatch,\n  getState,\n  { getFirebase, api }\n) => {\n  dispatch({\n    type: `ADD_${TRANSACTIONS}_PENDING`,\n  });\n\n  return api({\n    body,\n    dispatch,\n    getState,\n    getFirebase,\n    path: \"addTransaction\",\n  }).then(({ addTransaction }) => {\n    dispatch({\n      type: `ADD_${TRANSACTIONS}_SUCCESS`,\n      payload: addTransaction,\n    });\n\n    return addTransaction;\n  });\n};\n\nexport const importStatementAction = (body) => async (\n  dispatch,\n  getState,\n  { getFirebase, api }\n) => {\n  dispatch({\n    type: `IMPORT_${STATEMENT}_PENDING`,\n  });\n\n  return api({\n    body,\n    dispatch,\n    getState,\n    getFirebase,\n    path: \"importStatement\",\n  }).then(({ importStatement } = {}) => {\n    dispatch({\n      type: `IMPORT_${STATEMENT}_SUCCESS`,\n      payload: importStatement,\n    });\n\n    return importStatement;\n  });\n};\n","export const sumTransactions = (transactions = []) =>\n  transactions.reduce((sum, { amount }) => {\n    sum += amount;\n\n    return sum;\n  }, 0);\n","import React from \"react\";\nimport cn from \"classnames\";\nimport { connect } from \"react-redux\";\nimport { SkeletonText } from \"carbon-components-react\";\n\nimport toCurrency from \"utils/currency\";\nimport { sumTransactions } from \"utils/transactions\";\n\nimport Card from \"components/Card/Card\";\n\nimport \"./OverallSpending.scss\";\n\n//TODO: proptypes\n\nconst OverallSpending = ({\n  classNames,\n  transactions,\n  isLoading,\n  dispatch,\n  ...props\n}) => {\n  const total = sumTransactions(transactions);\n\n  return (\n    <Card\n      small\n      wrapped\n      centered\n      title=\"Overall Spending\"\n      className={cn(\"OverallSpending\", classNames)}\n      {...props}\n    >\n      <div className={cn(\"amount\", { isLoading })}>\n        {isLoading ? <SkeletonText /> : toCurrency(total)}\n      </div>\n    </Card>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  isLoading: state.ui.dashboard.isLoading.overallSpending,\n});\n\nexport default connect(mapStateToProps)(OverallSpending);\n","import React from \"react\";\nimport cn from \"classnames\";\nimport { connect } from \"react-redux\";\nimport { SkeletonText } from \"carbon-components-react\";\n\nimport Card from \"components/Card/Card\";\n\nimport toCurrency from \"utils/currency\";\nimport { sumTransactions } from \"utils/transactions\";\n\nimport \"./TransactionOverview.scss\";\n\n//TODO: proptypes\n\nconst TransactionOverview = ({\n  date,\n  bills,\n  deposits,\n  dispatch,\n  isLoading,\n  unplanned,\n  classNames,\n  ...props\n}) => {\n  const billsTotal = sumTransactions(bills);\n  const depositsTotal = sumTransactions(deposits);\n  const unplannedTotal = sumTransactions(unplanned);\n\n  const revenue = depositsTotal - unplannedTotal - billsTotal;\n\n  return (\n    <Card\n      small\n      wrapped\n      centered\n      spaceBetween\n      title=\"Transaction Overview\"\n      className={cn(\"TransactionOverview\", classNames)}\n      {...props}\n    >\n      <div className=\"overviewGroup\">\n        <span className=\"title\">Revenue</span>\n        <span\n          className={cn(\"amount\", {\n            negative: revenue < 0,\n            positive: revenue > 0,\n          })}\n        >\n          {/* TODO: MUST CALCULATE WITH BALANCE AT START OF MONTH */}\n          {isLoading ? <SkeletonText /> : toCurrency(revenue)}\n        </span>\n      </div>\n      <div className=\"overviewGroup\">\n        <span className=\"title\">Unplanned</span>\n        <span className=\"amount\">\n          {isLoading ? <SkeletonText /> : toCurrency(unplannedTotal)}\n        </span>\n      </div>\n      <div className=\"overviewGroup\">\n        <span className=\"title\">Bills</span>\n        <span className=\"amount\">\n          {isLoading ? <SkeletonText /> : toCurrency(billsTotal)}\n        </span>\n      </div>\n    </Card>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  isLoading: state.ui.dashboard.isLoading.transactionOverview,\n});\n\nexport default connect(mapStateToProps)(TransactionOverview);\n","import React from \"react\";\nimport cn from \"classnames\";\nimport { connect } from \"react-redux\";\nimport { Bar } from \"react-chartjs-2\";\nimport { InlineLoading } from \"carbon-components-react\";\n\nimport { formatTransactionsForStackedBarGraph } from \"state/selectors/TransactionSelectors\";\n\nimport Card from \"components/Card/Card\";\n\nimport \"./StackedCategoryChart.scss\";\n\nconst StackedCategoryChart = ({ isLoading, chartData }) => {\n  return (\n    <Card\n      wrapped\n      centered\n      title=\"Category Breakdown\"\n      className={cn(\"StackedCategoryChart\", {\n        \"StackedCategoryChart--Loading\": isLoading,\n      })}\n    >\n      {isLoading ? (\n        <InlineLoading />\n      ) : [...(chartData?.datasets || [])].length ? (\n        <Bar\n          data={chartData}\n          options={{\n            scales: {\n              xAxes: [\n                {\n                  stacked: true,\n                },\n              ],\n              yAxes: [\n                {\n                  stacked: true,\n                },\n              ],\n            },\n          }}\n        />\n      ) : null}\n    </Card>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  chartData: formatTransactionsForStackedBarGraph(state),\n  isLoading: state.ui.dashboard.isLoading.categoryBreakdown,\n});\n\nexport default connect(mapStateToProps)(StackedCategoryChart);\n","import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { fetchCategories, fetchTransactions } from \"./DashboardActions\";\n\nimport { getMonthTransactions } from \"state/selectors/TransactionSelectors\";\n\nimport MonthDisplay from \"components/MonthDisplay/MonthDisplay\";\nimport CategoryList from \"components/CategoryList/CategoryList\";\nimport OverviewChart from \"components/OverviewChart/OverviewChart\";\nimport AddTransaction from \"components/AddTransaction/AddTransaction\";\nimport OverallSpending from \"components/OverallSpending/OverallSpending\";\nimport TransactionOverview from \"components/TransactionOverview/TransactionOverview\";\nimport StackedCategoryChart from \"components/StackedCategoryChart/StackedCategoryChart\";\n\nconst Dashboard = ({\n  getCategories,\n  getTransactions,\n  transactions: { bills, deposits, unplanned },\n}) => {\n  /* eslint-disable react-hooks/exhaustive-deps */\n  useEffect(() => {\n    getCategories();\n    getTransactions();\n  }, []);\n  /* eslint-disable react-hooks/exhaustive-deps */\n\n  return (\n    <>\n      <div className=\"cashFlow\">\n        <OverallSpending transactions={bills.concat(unplanned)} />\n\n        <TransactionOverview\n          bills={bills}\n          deposits={deposits}\n          unplanned={unplanned}\n        />\n      </div>\n\n      <div className=\"monthAndAdd\">\n        <MonthDisplay />\n        <AddTransaction />\n      </div>\n\n      <OverviewChart unplanned={unplanned} />\n\n      <CategoryList bills={bills} deposits={deposits} unplanned={unplanned} />\n\n      <StackedCategoryChart />\n    </>\n  );\n};\n\nconst mapDispatchToProps = {\n  getCategories: fetchCategories,\n  getTransactions: fetchTransactions,\n};\n\nconst mapStateToProps = (state) => ({\n  isFetching: state.app.isFetching,\n  transactions: getMonthTransactions(state),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard);\n","import React from \"react\";\nimport cn from \"classnames\";\n// import PropTypes from \"prop-types\";\n\n// TODO: PropTypes\n\nimport \"./Page.scss\";\n\nconst Page = ({ children, name, ...props }) => {\n  return (\n    <div className={cn(\"Page\", `Page-${name}`)} {...props}>\n      {children}\n    </div>\n  );\n};\n\nexport default Page;\n","import React from \"react\";\nimport { TextInput } from \"carbon-components-react\";\n\nconst SignInForm = ({ error, formValues, setState, toggleForm, formTypes }) => {\n  const hasRequestedAccess = !!localStorage.getItem(\"hasRequestedAccess\");\n  return (\n    <>\n      <div className=\"form\">\n        <TextInput\n          id=\"email\"\n          labelText=\"Email\"\n          value={formValues.email}\n          onChange={setState(\"email\")}\n        />\n        <TextInput\n          id=\"password\"\n          type=\"password\"\n          labelText=\"Password\"\n          value={formValues.password}\n          onChange={setState(\"password\")}\n        />\n      </div>\n\n      {error && (\n        <div className=\"ErrorWrapper\">\n          <p className=\"bx--label error\">{error}</p>\n        </div>\n      )}\n\n      <div className=\"actions\">\n        {!hasRequestedAccess && (\n          <div className=\"buttonWrapper\">\n            <button\n              className=\"TextButton\"\n              onClick={toggleForm(formTypes.request)}\n            >\n              Request Access\n            </button>\n          </div>\n        )}\n\n        <div className=\"buttonWrapper\">\n          <button className=\"TextButton\" onClick={toggleForm(formTypes.forgot)}>\n            Forgot Password?\n          </button>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default SignInForm;\n","import React from \"react\";\nimport { TextInput } from \"carbon-components-react\";\n\nconst RequestAccess = ({\n  error,\n  setState,\n  formValues,\n  submittedSuccessfully,\n}) => {\n  return submittedSuccessfully ? (\n    <span className=\"pending\">\n      If approved, you'll get an email shortly to set your password.\n    </span>\n  ) : (\n    <>\n      <p className=\"cta\">\n        Let me know if you are interested in trying this app out.\n      </p>\n      <div className=\"form\">\n        <div className=\"Row\">\n          <TextInput\n            id=\"firstName\"\n            labelText=\"First Name\"\n            value={formValues.firstName}\n            onChange={setState(\"firstName\")}\n          />\n          <TextInput\n            id=\"lastName\"\n            labelText=\"Last Name\"\n            value={formValues.lastName}\n            onChange={setState(\"lastName\")}\n          />\n        </div>\n        <TextInput\n          id=\"email\"\n          labelText=\"Email\"\n          value={formValues.email}\n          onChange={setState(\"email\")}\n        />\n      </div>\n      {error && (\n        <div className=\"ErrorWrapper\">\n          <p className=\"bx--label error\">{error}</p>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default RequestAccess;\n","import React from \"react\";\nimport { TextInput } from \"carbon-components-react\";\n\nconst ForgotPassword = ({\n  error,\n  setState,\n  formValues,\n  submittedSuccessfully,\n}) => {\n  return submittedSuccessfully ? (\n    <span className=\"pending\">\n      You will receive an email in order to reset your password shortly.\n    </span>\n  ) : (\n    <>\n      <p className=\"cta\">Please enter your email address.</p>\n      <div className=\"form\">\n        <TextInput\n          id=\"email\"\n          labelText=\"Email\"\n          value={formValues.email}\n          onChange={setState(\"email\")}\n        />\n      </div>\n\n      {error && (\n        <div className=\"ErrorWrapper\">\n          <p className=\"bx--label error\">{error}</p>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default ForgotPassword;\n","import cn from \"classnames\";\nimport { connect } from \"react-redux\";\nimport React, { useState } from \"react\";\nimport { Modal } from \"carbon-components-react\";\n\nimport {\n  loginAction,\n  requestAccessAction,\n  forgotPasswordAction,\n} from \"./SignInActions\";\n\nimport { SignInForm, RequestAccessForm, ForgotPasswordForm } from \"./Forms\";\n\nimport \"./SignIn.scss\";\n\nconst initialFormState = {\n  firstName: \"\",\n  lastName: \"\",\n  email: \"\",\n  password: \"\",\n};\n\nconst formTypes = {\n  signIn: \"signIn\",\n  forgot: \"forgot\",\n  request: \"request\",\n};\n\nconst SignInModal = ({ login, requestAccess, forgotPassword }) => {\n  const [error, setError] = useState(\"\");\n  const [formType, setFormType] = useState(formTypes.signIn);\n  const [formValues, setFormValues] = useState(initialFormState);\n  const [submittedSuccessfully, setSubmittedSuccessfully] = useState(false);\n\n  const setState = (key) => (e) => {\n    const nextState = {\n      ...formValues,\n      [key]: e.target.value,\n    };\n\n    setFormValues(nextState);\n  };\n\n  const handleClearForm = () => {\n    setFormValues(initialFormState);\n    setError(\"\");\n  };\n\n  const handleSubmitForm = () => {\n    const action =\n      formType === formTypes.signIn\n        ? login\n        : formType === formTypes.request\n        ? requestAccess\n        : forgotPassword;\n\n    const values =\n      formType === formTypes.signIn\n        ? { email: formValues.email, password: formValues.password }\n        : formType === formTypes.request\n        ? {\n            email: formValues.email,\n            firstName: formValues.firstName,\n            lastName: formValues.lastName,\n          }\n        : { email: formValues.email };\n\n    action(values)\n      .then((resp) => {\n        setError(\"\");\n        setSubmittedSuccessfully(true);\n      })\n      .catch((err) => {\n        setError(err.message);\n      });\n  };\n\n  const toggleForm = (toggle) => () => {\n    setFormType(toggle);\n  };\n\n  const Form =\n    formType === formTypes.signIn\n      ? SignInForm\n      : formType === formTypes.request\n      ? RequestAccessForm\n      : ForgotPasswordForm;\n\n  const modalHeading =\n    formType === formTypes.signIn\n      ? \"Sign In\"\n      : formType === formTypes.request\n      ? \"Request Access\"\n      : \"Forgot Password\";\n\n  const submitButton =\n    formType === formTypes.signIn\n      ? \"Sign In\"\n      : formType === formTypes.request\n      ? \"Request Access\"\n      : \"Submit\";\n\n  return (\n    <div\n      className={cn(\"SignIn\", `SignIn--${formType}`, {\n        \"Signin--submitted\": submittedSuccessfully,\n      })}\n    >\n      <Modal\n        open\n        hasForm\n        size=\"sm\"\n        shouldSubmitOnEnter\n        preventCloseOnClickOutside\n        modalHeading={modalHeading}\n        secondaryButtonText=\"Clear\"\n        primaryButtonText={submitButton}\n        onRequestSubmit={handleSubmitForm}\n        onSecondarySubmit={handleClearForm}\n        aria-label={`${modalHeading} Modal`}\n      >\n        <Form\n          error={error}\n          setState={setState}\n          formTypes={formTypes}\n          formValues={formValues}\n          toggleForm={toggleForm}\n          submittedSuccessfully={submittedSuccessfully}\n        />\n      </Modal>\n    </div>\n  );\n};\n\nconst mapDispatchToProps = {\n  login: loginAction,\n  requestAccess: requestAccessAction,\n  forgotPassword: forgotPasswordAction,\n};\n\nexport default connect(null, mapDispatchToProps)(SignInModal);\n","import { SIGN_IN, REQUEST_ACCESS, FORGOT_PASSWORD } from \"state/SessionReducer\";\n\nexport const loginAction = (props) => async (\n  dispatch,\n  getState,\n  { getFirebase, api },\n  ...rest\n) => {\n  const firebase = getFirebase();\n\n  dispatch({\n    type: `${SIGN_IN}_PENDING`,\n  });\n\n  try {\n    await firebase.login(props);\n\n    dispatch({\n      type: `${SIGN_IN}_SUCCESS`,\n    });\n\n    return;\n  } catch (err) {\n    dispatch({\n      type: `${SIGN_IN}_FAILURE`,\n      payload: err.message,\n    });\n\n    throw new Error(err.message);\n  }\n};\n\nexport const requestAccessAction = (body) => async (\n  dispatch,\n  getState,\n  { getFirebase, api }\n) => {\n  dispatch({\n    type: `${REQUEST_ACCESS}_PENDING`,\n  });\n\n  return api({\n    body,\n    dispatch,\n    getState,\n    getFirebase,\n    path: \"requestAccess\",\n  }).then(({ requestAccess: { errors, ...requestAccess } = {} } = {}) => {\n    console.warn({ errors, requestAccess });\n    if (errors) {\n      dispatch({\n        type: `${REQUEST_ACCESS}_FAILURE`,\n        payload: errors,\n      });\n\n      throw new Error(errors[0].message);\n    } else {\n      dispatch({\n        type: `${REQUEST_ACCESS}_SUCCESS`,\n        payload: requestAccess,\n      });\n    }\n\n    localStorage.setItem(\"hasRequestedAccess\", true);\n\n    return requestAccess;\n  });\n};\n\nexport const forgotPasswordAction = ({ email }) => async (\n  dispatch,\n  getState,\n  { getFirebase, api }\n) => {\n  dispatch({\n    type: `${FORGOT_PASSWORD}_PENDING`,\n  });\n\n  const firebase = getFirebase();\n\n  return firebase.resetPassword(email).catch((error) => {\n    throw new Error(error.message);\n  });\n};\n","import { createSelector } from \"reselect\";\n\nexport const getFirebaseAuth = (state) => state.firebase.auth;\nexport const getIsFirebaseLoaded = (state) => state.firebase.auth.isLoaded;\nexport const getIsFirebaseInitializing = (state) =>\n  state.firebase.auth.isInitializing;\n\nexport const hasFirebaseLoaded = createSelector(\n  [getIsFirebaseLoaded],\n  (isFirebaseLoaded) => isFirebaseLoaded\n);\n\nexport const hasFirebaseInitialized = createSelector(\n  [getIsFirebaseInitializing],\n  (isFirebaseInitializing) => isFirebaseInitializing\n);\n","import { createSelector } from \"reselect\";\n\nimport {\n  getFirebaseAuth,\n  hasFirebaseLoaded,\n  hasFirebaseInitialized,\n} from \"state/selectors/FirebaseSelectors\";\n\nexport const isAuthenticated = createSelector(\n  [hasFirebaseLoaded, hasFirebaseInitialized, getFirebaseAuth],\n  (isLoaded, hasInitialized, auth) => {\n    if (hasInitialized || !isLoaded) {\n      return null;\n    }\n\n    return !!auth.uid;\n  }\n);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Dashboard from \"./Dashboard\";\nimport Page from \"components/Page/Page\";\nimport SignInModal from \"components/SignIn/SignIn\";\n\nimport { isAuthenticated } from \"state/selectors/UserSelectors\";\nimport { hasFirebaseLoaded } from \"state/selectors/FirebaseSelectors\";\n\nimport \"./Home.scss\";\n\nconst Home = ({ isSignedIn, hasFirebaseLoaded }) =>\n  !hasFirebaseLoaded ? null : (\n    <Page name=\"Home\">{isSignedIn ? <Dashboard /> : <SignInModal />}</Page>\n  );\n\nconst mapStateToProps = (state) => ({\n  isSignedIn: isAuthenticated(state),\n  hasFirebaseLoaded: hasFirebaseLoaded(state),\n});\n\nexport default connect(mapStateToProps)(Home);\n"],"sourceRoot":""}