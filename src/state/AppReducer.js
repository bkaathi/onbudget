import { combineReducers } from "redux";

export const EXPENSES = "EXPENSES";
export const CATEGORIES = "CATEGORIES";

const initialState = {
  isLoading: false,
  categories: [],
  isFetching: false,
  expenses: [],
};

const isLoading = (state = initialState.isLoading, { type }) => {
  // for all dispatches generated by API generally
  if (/^.+_PENDING$/gi.test(type)) {
    return true;
  }

  if (/^.+_(SUCCESS|FAIL(URE|ED)?)$/gi.test(type)) {
    return false;
  }

  switch (type) {
    case "@@reactReduxFirebase/LOGIN":
    case "@@reactReduxFirebase/LOGIN_ERROR":
    case "@@reactReduxFirebase/AUTH_EMPTY_CHANGE":
      return false;
    case "@@reactReduxFirebase/AUTHENTICATION_INIT_STARTED":
      return true;
    default:
      return state;
  }
};

const categories = (state = initialState.categories, { type, payload }) => {
  switch (type) {
    case `${CATEGORIES}_SUCCESS`:
      return payload;
    case `${CATEGORIES}_PENDING`:
    case `${CATEGORIES}_FAILURE`:
    default:
      return state;
  }
};

const expenses = (state = initialState.expenses, { type, payload }) => {
  switch (type) {
    case `${EXPENSES}_SUCCESS`:
      return payload;
    case `${EXPENSES}_PENDING`:
    case `${EXPENSES}_FAILURE`:
    default:
      return state;
  }
};

const isFetching = (state = initialState.isFetching, { type }) => {
  switch (type) {
    case `${CATEGORIES}_PENDING`:
      return true;
    case `${CATEGORIES}_SUCCESS`:
    case `${CATEGORIES}_FAILURE`:
      return false;
    default:
      return state;
  }
};

export default combineReducers({
  expenses,
  isLoading,
  categories,
  isFetching,
});
