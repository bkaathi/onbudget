import clone from "clone-deep";
import { combineReducers } from "redux";

export const STATEMENT = "STATEMENT";
export const CATEGORIES = "CATEGORIES";
export const TRANSACTIONS = "TRANSACTIONS";

const initialState = {
  isLoading: false,
  categories: [],
  isFetching: false,
  transactions: [],
};

const isLoading = (state = initialState.isLoading, { type }) => {
  // for all dispatches generated by API generally
  if (/^.+_PENDING$/gi.test(type)) {
    return true;
  }

  if (/^.+_(SUCCESS|FAIL(URE|ED)?)$/gi.test(type)) {
    return false;
  }

  switch (type) {
    case "@@reactReduxFirebase/LOGIN":
    case "@@reactReduxFirebase/LOGIN_ERROR":
    case "@@reactReduxFirebase/AUTH_EMPTY_CHANGE":
      return false;
    case "@@reactReduxFirebase/AUTHENTICATION_INIT_STARTED":
      return true;
    default:
      return state;
  }
};

const categories = (state = initialState.categories, { type, payload }) => {
  switch (type) {
    case `${CATEGORIES}_SUCCESS`:
      return payload;
    case `ADD_${CATEGORIES}_SUCCESS`:
      return state.concat(payload);
    case `EDIT_${CATEGORIES}_SUCCESS`:
      const nextState = clone(state);

      const changedIndex = nextState.findIndex(
        (item) => item.id === payload.id
      );

      nextState[changedIndex] = payload;

      return nextState;
    case `${CATEGORIES}_PENDING`:
    case `${CATEGORIES}_FAILURE`:
    default:
      return state;
  }
};

const transactions = (state = initialState.transactions, { type, payload }) => {
  switch (type) {
    case `${TRANSACTIONS}_SUCCESS`:
      return payload;
    case `${TRANSACTIONS}_BY_MONTH_SUCCESS`:
      return state.concat(payload);
    case `${TRANSACTIONS}_PENDING`:
    case `${TRANSACTIONS}_FAILURE`:
    default:
      return state;
  }
};

const isFetching = (state = initialState.isFetching, { type }) => {
  switch (type) {
    case `${CATEGORIES}_PENDING`:
      return true;
    case `${CATEGORIES}_SUCCESS`:
    case `${CATEGORIES}_FAILURE`:
      return false;
    default:
      return state;
  }
};

export default combineReducers({
  isLoading,
  categories,
  isFetching,
  transactions,
});
